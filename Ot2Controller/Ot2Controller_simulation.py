"""
________________________________________________________________________

:PROJECT: *OT-2 Controller*

:details: Ot2Controller:
    A SiLA 2 complaint controller for an OT-2 Liquid Handler robot.

:file:    Ot2Controller_simulation.py
:authors: Florian Bauer <florian.bauer.dev@gmail.com>

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.0.1"

import io
import logging
import os
import pathlib
import shutil

import grpc  # used for type hinting only
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

from .gRPC import Ot2Controller_pb2 as Ot2Controller_pb2
from PIL import Image

USER_STORAGE_DIR: str = "/tmp/data/user_storage/"
JUPYTER_NOTEBOOK_DIR: str = "/tmp/var/lib/jupyter/notebooks/"


# noinspection PyPep8Naming,PyUnusedLocal
class Ot2ControllerSimulation:
    """
    Implementation of the *OT-2 Controller* in *Simulation* mode
        A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler robot.
    """

    def __init__(self):
        pathlib.Path(USER_STORAGE_DIR).mkdir(parents=True, exist_ok=True)
        pathlib.Path(JUPYTER_NOTEBOOK_DIR).mkdir(parents=True, exist_ok=True)
        logging.debug('Started server in mode: {mode}'.format(mode='Simulation'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(command_progress if command_progress is not None else None),
            estimatedRemainingTime=(command_estimated_remaining if command_estimated_remaining is not None else None),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None)
        )

    def UploadProtocol(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.UploadProtocol_Responses:
        """
        Executes the unobservable command "Upload Protocol"
            Uploads the given Protocol to the "/data/user_storage" dir on the OT-2.
    
        :param request: gRPC request containing the parameters passed:
            request.ProtocolSourcePath (Protocol Source Path): The path to the Protocol to upload.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
        pathlib.Path(USER_STORAGE_DIR).mkdir(parents=True, exist_ok=True)
        src: str = str(pathlib.Path(request.ProtocolSourcePath.value).expanduser().resolve())
        dst: str = USER_STORAGE_DIR
        try:
            shutil.copy(src, dst)
        except FileNotFoundError as error:
            logging.error(error)
            raise

        logging.info(f"uploaded {src} to {dst}")
        return Ot2Controller_pb2.UploadProtocol_Responses()

    def RemoveProtocol(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.RemoveProtocol_Responses:
        """
        Executes the unobservable command "Remove Protocol"
            Removes the given Protocol from the "/data/user_storage" dir on the OT-2.
    
        :param request: gRPC request containing the parameters passed:
            request.ProtocolFile (Protocol File): The file name of the Protocol to remove.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
        file: str = str(pathlib.Path(USER_STORAGE_DIR + request.ProtocolFile.value).expanduser().resolve())
        try:
            os.remove(file)
        except FileNotFoundError as error:
            logging.error(error)
            raise

        logging.info(f"removed {file}")
        return Ot2Controller_pb2.RemoveProtocol_Responses()

    def RunProtocol(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.RunProtocol_Responses:
        """
        Executes the unobservable command "Run Protocol"
            Runs the given Protocol on the OT-2.
    
        :param request: gRPC request containing the parameters passed:
            request.ProtocolFile (Protocol File): The file name of the Protocol to run.
            request.IsSimulating (Is Simulating): Defines whether the protocol gets just simulated or actually executed
            on the device.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): The returned value from the executed protocol. On a simulated execution,
            only the value 0 is indicating a successful simulation.
        """
        cmd: str = "python3 -m opentrons.simulate " + USER_STORAGE_DIR + request.ProtocolFile.value

        logging.info(f"run '{cmd}'")
        # Run command.
        run_ret: int = os.system(cmd)
        logging.info("run returned '" + str(run_ret) + "'")

        if request.IsSimulating.value and run_ret != 0:
            raise ValueError("The simulation of the protocol failed.")

        return Ot2Controller_pb2.RunProtocol_Responses(ReturnValue=silaFW_pb2.Integer(value=run_ret))

    def Get_Connection(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.Get_Connection_Responses:
        """
        Requests the unobservable property Connection
            Connection details of the remote OT-2.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.Connection (Connection): Connection details of the remote OT-2.
        """
        dummy_connection_info = silaFW_pb2.String(value="This is just the simulation mode. No real data or info here.")
        return Ot2Controller_pb2.Get_Connection_Responses(Connection=dummy_connection_info)

    def Get_AvailableProtocols(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.Get_AvailableProtocols_Responses:
        """
        Requests the unobservable property Available Protocols
            List of the stored files available on the OT-2.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.AvailableProtocols (Available Protocols): List of the stored files available on the OT-2.
        """
        protocol_list = [
            silaFW_pb2.String(value="dummy_protocol_01.py"),
            silaFW_pb2.String(value="dummy_protocol_02.py"),
            silaFW_pb2.String(value="dummy_protocol_03.py")
        ]
        return Ot2Controller_pb2.Get_AvailableProtocols_Responses(AvailableProtocols=protocol_list)

    def Get_AvailableJupyterNotebooks(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.Get_AvailableJupyterNotebooks_Responses:
        """
        Requests the unobservable property Available Jupyter Notebooks
            List of the stored Jupyter Notebooks available on the OT-2.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.AvailableJupyterNotebooks (Available Jupyter Notebooks): List of the stored Jupyter Notebooks
            available on the OT-2.
        """
        notebook_list = [
            silaFW_pb2.String(value="dummy_notebook_01.py"),
            silaFW_pb2.String(value="dummy_notebook_02.py"),
            silaFW_pb2.String(value="dummy_notebook_03.py")
        ]
        return Ot2Controller_pb2.Get_AvailableJupyterNotebooks_Responses(AvailableJupyterNotebooks=notebook_list)

    def Get_CameraPicture(self, request, context: grpc.ServicerContext) \
            -> Ot2Controller_pb2.Get_CameraPicture_Responses:
        """
        Requests the unobservable property Camera Picture
            A current picture from the inside of the OT-2 made with the built-in camera.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.CameraPicture (Camera Picture): A current picture from the inside of the OT-2 made with the built-in
            camera.
        """
        payload: str = "BlaBlaBla"
        byte_stream = bytes(payload, "utf-8")

        cam_pic_struct = Ot2Controller_pb2.Get_CameraPicture_Responses.CameraPicture_Struct(
            ImageData=silaFW_pb2.Binary(value=byte_stream),
            ImageTimestamp=silaFW_pb2.Timestamp())

        return Ot2Controller_pb2.Get_CameraPicture_Responses(CameraPicture=cam_pic_struct)
