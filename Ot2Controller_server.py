#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: *Ot2Controller*

:details: Ot2Controller:
    A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler.
           
:file:    Ot2Controller_server.py
:authors: Florian Bauer <florian.bauer.dev@gmail.com>

.. note:: Code generated by sila2codegenerator 0.3.4

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

import argparse
import logging
from sila2lib.sila_server import SiLA2Server
from Ot2Controller.Ot2Controller_real import Ot2ControllerReal
from Ot2Controller.gRPC import Ot2Controller_pb2_grpc

SERVER_TYPE: str = "OpentronsOt2Controller"
SERVER_DESC: str = "A SiLA 2 service enabling the execution of python protocols on an Opentrons 2 liquid handling " \
                   "robot."

def parse_command_line():
    """
    Just looking for commandline arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 service: Ot2Controller")

    # Simple arguments for the server identification
    parser.add_argument('-a', '--ip-address', action='store',
                        default=None, help='The IP-address of the OT-2 device to connect to.', required=True)
    parser.add_argument('-p', '--port', action='store',
                        default=50064, help='Starts the SiLA server on the given port (default=50064).')
    parser.add_argument('-s', '--server-name', action='store',
                        default="Ot2Controller", help='Starts the SiLA server with the given name.')

    # Encryption
    parser.add_argument('-X', '--encryption', action='store', default=None,
                        help='The name of the private key and certificate file (without extension).')
    parser.add_argument('--encryption-key', action='store', default=None,
                        help='The name of the encryption key (*with* extension). Can be used if key and certificate '
                             'vary or non-standard file extensions are used.')
    parser.add_argument('--encryption-cert', action='store', default=None,
                        help='The name of the encryption certificate (*with* extension). Can be used if key and '
                             'certificate vary or non-standard file extensions are used.')

    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    parsed_args = parser.parse_args()

    # validate/update some settings
    #   encryption
    if parsed_args.encryption is not None:
        # only overwrite the separate keys if not given manually
        if parsed_args.encryption_key is None:
            parsed_args.encryption_key = parsed_args.encryption + '.key'
        if parsed_args.encryption_cert is None:
            parsed_args.encryption_cert = parsed_args.encryption + '.crt'

    return parsed_args


if __name__ == '__main__':
    # or use logging.ERROR for less output
    logging.basicConfig(format='%(levelname)-8s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)

    args = parse_command_line()

    sila_server = SiLA2Server(name=args.server_name, description=SERVER_DESC,
                              server_type=SERVER_TYPE, server_uuid=None,
                              version=__version__,
                              vendor_url="https://github.com/FlorianBauer/ot2-controller",
                              ip="127.0.0.1", port=int(args.port),
                              simulation_mode=False)

    # add the actual OT2-Controller
    ot2_controller = Ot2ControllerReal(device_ip=args.ip_address)
    Ot2Controller_pb2_grpc.add_Ot2ControllerServicer_to_server(
        ot2_controller,
        sila_server.grpc_server)
    sila_server.add_feature(feature_id='de.fau/dispensing/Ot2Controller/v1',
                            servicer=sila_server.SiLAService_feature,
                            data_path='meta')

    # start the server
    sila_server.run()
