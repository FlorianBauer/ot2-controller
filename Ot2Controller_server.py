#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Ot2Controller*

:details: Ot2Controller:
    A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler robot.
           
:file:    Ot2Controller_server.py
:authors: Florian Bauer <florian.bauer.dev@gmail.com>

:date: (creation)          2020-08-16T15:26:47.845626
:date: (last modification) 2020-08-16T15:26:47.845626

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.0.1"

import logging
import argparse

# Import the main SiLA library
from sila2lib.sila_server import SiLA2Server

# Import gRPC libraries of features
from Ot2Controller.gRPC import Ot2Controller_pb2
from Ot2Controller.gRPC import Ot2Controller_pb2_grpc
# import default arguments for this feature
from Ot2Controller.Ot2Controller_default_arguments import default_dict as Ot2Controller_default_dict

# Import the servicer modules for each feature
from Ot2Controller.Ot2Controller_servicer import Ot2Controller


class Ot2ControllerServer(SiLA2Server):
    """
    A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler robot.
    """

    def __init__(self, cmd_args, simulation_mode: bool = True):
        """Class initialiser"""
        super().__init__(
            name=cmd_args.server_name, description=cmd_args.description,
            server_type=cmd_args.server_type, server_uuid=None,
            version=__version__,
            vendor_url="https://www.cs7.tf.fau.de",
            ip="127.0.0.1", port=50053,
            key_file=cmd_args.encryption_key, cert_file=cmd_args.encryption_cert
        )

        logging.info(
            "Starting SiLA2 server with server name: {server_name}".format(
                server_name=cmd_args.server_name
            )
        )

        # registering features
        #  Register Ot2Controller
        self.Ot2Controller_servicer = Ot2Controller(simulation_mode=self.simulation_mode)
        Ot2Controller_pb2_grpc.add_Ot2ControllerServicer_to_server(
            self.Ot2Controller_servicer,
            self.grpc_server
        )
        self.add_feature(feature_id='Ot2Controller',
                         servicer=self.Ot2Controller_servicer,
                         data_path='meta')

        self.simulation_mode = simulation_mode

        # starting and running the gRPC/SiLA2 server
        self.run()


def parse_command_line():
    """
    Just looking for commandline arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 service: Ot2Controller")

    # Simple arguments for the server identification
    parser.add_argument('-s', '--server-name', action='store',
                        default="Ot2Controller", help='start SiLA server with [server-name]')
    parser.add_argument('-t', '--server-type', action='store',
                        default="Liquid Dispenser Robot Protocol Server", help='start SiLA server with [server-type]')
    parser.add_argument('-d', '--description', action='store',
                        default="A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler robot.", help='SiLA server description')

    # Encryption
    parser.add_argument('-X', '--encryption', action='store', default=None,
                        help='The name of the private key and certificate file (without extension).')
    parser.add_argument('--encryption-key', action='store', default=None,
                        help='The name of the encryption key (*with* extension). Can be used if key and certificate '
                             'vary or non-standard file extensions are used.')
    parser.add_argument('--encryption-cert', action='store', default=None,
                        help='The name of the encryption certificate (*with* extension). Can be used if key and '
                             'certificate vary or non-standard file extensions are used.')

    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    parsed_args = parser.parse_args()

    # validate/update some settings
    #   encryption
    if parsed_args.encryption is not None:
        # only overwrite the separate keys if not given manually
        if parsed_args.encryption_key is None:
            parsed_args.encryption_key = parsed_args.encryption + '.key'
        if parsed_args.encryption_cert is None:
            parsed_args.encryption_cert = parsed_args.encryption + '.cert'

    return parsed_args
    
        
if __name__ == '__main__':
    # or use logging.ERROR for less output
    logging.basicConfig(format='%(levelname)-8s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)
    
    args = parse_command_line()

    # generate SiLA2Server
    sila_server = Ot2ControllerServer(cmd_args=args, simulation_mode=True)
