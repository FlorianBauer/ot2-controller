#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: *Ot2Controller*

:details: Ot2Controller:
    A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid handler robot.
           
:file:    Ot2Controller_server.py
:authors: Florian Bauer <florian.bauer.dev@gmail.com>

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.0.1"

import argparse
import logging

from sila2lib.sila_server import SiLA2Server

from Ot2Controller.Ot2Controller_real import Ot2ControllerReal
from Ot2Controller.gRPC import Ot2Controller_pb2_grpc


def parse_command_line():
    """
    Just looking for commandline arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 service: Ot2Controller")

    # Simple arguments for the server identification
    parser.add_argument('-s', '--server-name', action='store',
                        default="Ot2Controller", help='start SiLA server with [server-name]')
    parser.add_argument('-t', '--server-type', action='store',
                        default="OpentronsOt2Controller", help='start SiLA server with [server-type]')
    parser.add_argument('-d', '--description', action='store',
                        default="A SiLA 2 service enabling the execution of python protocols on a Opentrons 2 liquid "
                                "handler robot.", help='SiLA server description')

    # Encryption
    parser.add_argument('-X', '--encryption', action='store', default=None,
                        help='The name of the private key and certificate file (without extension).')
    parser.add_argument('--encryption-key', action='store', default=None,
                        help='The name of the encryption key (*with* extension). Can be used if key and certificate '
                             'vary or non-standard file extensions are used.')
    parser.add_argument('--encryption-cert', action='store', default=None,
                        help='The name of the encryption certificate (*with* extension). Can be used if key and '
                             'certificate vary or non-standard file extensions are used.')

    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    parsed_args = parser.parse_args()

    # validate/update some settings
    #   encryption
    if parsed_args.encryption is not None:
        # only overwrite the separate keys if not given manually
        if parsed_args.encryption_key is None:
            parsed_args.encryption_key = parsed_args.encryption + '.key'
        if parsed_args.encryption_cert is None:
            parsed_args.encryption_cert = parsed_args.encryption + '.cert'

    return parsed_args


if __name__ == '__main__':
    # or use logging.ERROR for less output
    logging.basicConfig(format='%(levelname)-8s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)

    args = parse_command_line()

    sila_server = SiLA2Server(name=args.server_name, description=args.description,
                              server_type=args.server_type, server_uuid=None,
                              version=__version__,
                              vendor_url="https://www.cs7.tf.fau.de",
                              ip="127.0.0.1", port=50053,
                              key_file=args.encryption_key, cert_file=args.encryption_cert)

    # remove the pesky SimulationController
    sila_server.SiLAService_feature.implemented_features.pop("SimulationController")

    # add the actual OT2-Controller
    ot2_controller = Ot2ControllerReal()
    Ot2Controller_pb2_grpc.add_Ot2ControllerServicer_to_server(
        ot2_controller,
        sila_server.grpc_server)
    sila_server.add_feature(feature_id='Ot2Controller',
                            servicer=sila_server.SiLAService_feature,
                            data_path='meta')
    # start the server
    sila_server.run()
